// AFX: "AFXMS" "0..1"
// AFX: "AFXSMOKE" "0..1"
// AFX: "AFXDEPTHMODE" "0..4"
// AFX: "AFXD24" "0..3"

// SKIP: ($AFXD24 == 2 || $AFXD24 == 4) && ($AFXDEPTHMODE != 0)

// AFXMS:
// 0 - no multi sampling
// 1 - (only) normal depth buffer is multi sampled

// AFXSMOKE:
// 0 - do not composite smoke texture
// 1 - composite smoke texture

// AFXDEPTHMODE:
// 0 - inverse depth (original)
// 1 - linear depth (with spherical correction)
// 2 - logarithmic depth (with spherical correction) (natural logarithm)
// 3 - linear depth
// 4 - logarithmic depth (natural logarithm)

// AFXD24:
// 0 - draw gray depth
// 1 - draw rgb-encoded depth
// 2 - rgba pack (for afx_interop)
// 3 - draw dithered

#if 1 == AFXMS
Texture2DMS<float> input : register(t0);
#else
Texture2D<float> input : register(t0);
#endif

#if 1 == AFXSMOKE
Texture2D<float> input2 : register(t1);
#endif

cbuffer CS_CONSTANT_BUFFER : register(b0)
{
	float cZNear : packoffset(c0.x);
	float cZFar : packoffset(c0.y);
	float cOutNear : packoffset(c0.z);
	float cOutFar : packoffset(c0.w);
	float cNormalNear : packoffset(c1.x);
	float cNormalFar : packoffset(c1.y);
	float cSkyNear : packoffset(c1.z);
	float cSkyFar : packoffset(c1.w);
	int cViewportWidth : packoffset(c2.x);
	int cViewportHeight : packoffset(c2.y);
	int cWidth : packoffset(c2.z);
	int cHeight : packoffset(c2.w);
    float4x4 cInvViewProj : packoffset(c3); // only used in 1 == AFXDEPTHMODE || 2 == AFXDEPTHMODE
};

struct PS_INPUT
{
	float4 pos : SV_POSITION;
};

float4 main( PS_INPUT i ) : SV_TARGET
{
	uint2 outDim = int2(cWidth, cHeight);
	uint2 dim;
#if 1 == AFXMS
	uint sampleCount;
	input.GetDimensions(dim.x, dim.y, sampleCount);
#endif
	dim = int2(cViewportWidth, cViewportHeight);
	float2 pp = i.pos.xy - float2(0.5, 0.5);
	
#if 1 == AFXMS
	float depth = 1;
	for (uint k = 0; k < sampleCount; k++)
	{
		float val = input.Load(int2(round(pp * dim.xy / outDim.xy)), k).r;
		depth = min(depth, val);
	}
#else
	float depth = input.Load(int3(int2(round(pp * dim.xy / outDim.xy)),0)).r;
#endif

#if 1 == AFXSMOKE
	float val = input2.Load(int3(round(pp * dim.xy / outDim.xy),0)).r;
	if(val<cNormalFar) {
		depth = min(depth,val);
	}
#endif

if(cNormalFar < depth) {
	depth = (depth - cNormalFar) / (1 - cNormalFar);

	float f1 = (-1) * cSkyFar * cSkyNear * 1.0;
	float xD = cSkyFar - cSkyNear;
	depth = f1/(depth * xD - cSkyFar);
	
	float f12 = (-1) * cZFar * cZNear * 1.0;
	float xD2 = cZFar - cZNear;
	depth = (f12/depth + cZFar)/xD2;
} else {
	depth = (depth - cNormalNear)/(cNormalFar - cNormalNear);
}

#if 0 == AFXDEPTHMODE

	float f1 = (-1) * cZFar * cZNear * 1.0;
	float xD = cZFar - cZNear;

	float outNear = (f1 / cOutNear + cZFar)/xD;
	float outFar = (f1 / cOutFar + cZFar)/xD;
	
	depth = (depth - outNear) / (outFar - outNear);

#elif 1 == AFXDEPTHMODE || 2 == AFXDEPTHMODE

	// Linearize Quake-like depth buffer with spherical correction using the inverse projection matrix:
	
	float4 eyeVec = mul(cInvViewProj, float4(2.0 * i.pos.x / outDim.x - 1, 2.0 * i.pos.y / outDim.y - 1, depth, 1.0));
	
	eyeVec.xyz /= eyeVec.w;

	depth = length(eyeVec.xyz);
	
	// Transform [outNear,OutFar] to [0,1]
#if 2 == AFXDEPTHMODE
	depth = log(1 + depth - cOutNear) / log(1 + cOutFar - cOutNear);
#else
	depth = (depth - cOutNear) / (cOutFar - cOutNear);
#endif

#elif 3 == AFXDEPTHMODE || 4 == AFXDEPTHMODE

	float f1 = (-1) * cZFar * cZNear * 1.0;
	float xD = cZFar - cZNear;

	// Linearize Quake-like depth buffer:

	depth = f1/(depth * xD -cZFar);
	
	// Transform [outNear,OutFar] to [0,1]
#if 4 == AFXDEPTHMODE
	depth = log(1 + depth - cOutNear) / log(1 + cOutFar - cOutNear);
#else
	depth = (depth - cOutNear) / (cOutFar - cOutNear);
#endif

#endif


#if 0 == AFXD24
	return float4(depth, depth, depth, 1.0);
#elif 1 == AFXD24
	depth = saturate(depth);
	const float maxint24 = 256*256*256-1;
	float3 color = depth * float3(maxint24/(256),maxint24/(256*256),maxint24/(256*256*256));
	color = frac(color);
	color.b -= color.g/256.0;
	color.g -= color.r/256.0;
	color *= 256/255.0;
	return float4(color, 1.0);
#elif 2 == AFXD24
	if(depth < 0)
		return float4(0,0,0,0);
	else if(depth >= 1)
		return float4(1,1,1,1);
	else {
		const float4 kEncodeMul = float4(1.0, 255.0, 65025.0, 16581375.0);
		const float4 kEncodeBit = 1.0/255.0;
	
		float4 enc = kEncodeMul * depth;
		enc = frac (enc);
		enc -= enc.yzww * kEncodeBit;
		return enc;
	}
#elif 3 == AFXD24
	// Sadly I couldn't beat the ReShade.me pattern:
	float grid_position = frac(dot(pp/float2(outDim.xy), (float2(outDim.xy) * float2(1.0 / 16.0, 10.0 / 36.0)) + 0.25));
	float dither_shift = 0.5 / 255.0;
	float3 dither_shift_rgb = float3(dither_shift, -dither_shift, dither_shift);
	dither_shift_rgb = lerp(dither_shift_rgb, -dither_shift_rgb, grid_position);
	return float4(depth + dither_shift_rgb.r, depth - dither_shift_rgb.g, depth + dither_shift_rgb.b, 1.0);
#endif
}
