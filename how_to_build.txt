Notice:
  We recommend using GIT Bash of https://git-scm.com/ to obtain the HLAE source
  code and also for applying the .patch files to libraries where neccessary.
  
  For some of the files required we have a backup on Google Drive:
  https://drive.google.com/drive/folders/0B4_pxNNt7RqmdXVmbUk0aVA3Qk0?usp=sharing
  But we recommend getting them from the original sources.


[X] Download and install Microsoft Visual Studio 2017 Community, which you can
    obtain for free from https://www.visualstudio.com/downloads/ .
    (We are using 15.8 at the moment.)

[X] Obtain and install CMAKE from http://www.cmake.org/
    We currently use "cmake-3.8.1-win64-x64.msi".

[X] Obtain the HLAE source code from https://github.com/advancedfx/advancedfx into a
    folder you like, we'll call it <HLAESRC> from now on (by that I mean
    extract it so that you end up with the files like advancedfx.sln and directories
    in C:\<HLAESRC>\advancedfx folder).
    We recommend using the GIT Bash to obtain the source code, so you can
    easily fetch and merge updates from the advancedfx repository:
    cd /c/<HLAESRC>
    git clone --recursive https://github.com/advancedfx/advancedfx.git

[X] Obtain the following files from http://openexr.com/ :
    ilmbase-2.2.1.tar.gz, openexr-2.2.1.tar.gz and extract their contents
    into "C:\Libraries"

[X] Obtain zlib-1.2.11.tar.gz from http://zlib.net and extract it into
    "C:\Libraries"

[X] Open the GIT Bash we recommended above in order to apply the patches
    for the ilmbase library:
    cd /c/Libraries/ilmbase-2.2.1/
    patch CMakeLists.txt /c/<HLAESRC>/advancedfx/patches/ilmbase-2.2.1/CMakeLists.txt.patch

[X] Build ilmbase solutions using cmake:
    Enter the "C:\Libraries\ilmbase-2.2.1" directory and execute
    setlocal
    del /f CMakeCache.txt
    cmake "-DCMAKE_INSTALL_PREFIX=C:\<HLAESRC>\ilmbase-build" -G "Visual Studio 15 2017" -T "v141_xp"

[X] Open the C:\Libraries\ilmbase-2.2.1\ilmbase.sln created in the previous step
    Select the Release configuration.
    Then build the Solution.
    After that build the INSTALL project in the solution.

[X] Open the GIT Bash we recommended above in order to apply the patches
    for the zlib library:
    cd /c/Libraries/zlib-1.2.11/win32/
    patch Makefile.msc /c/<HLAESRC>/advancedfx/patches/zlib-1.2.11/win32/Makefile.msc.patch

[X] Build zlib using nmake:
    Open the Developer Command Prompt for VS2017 and enter the
    "C:\Libraries\zlib-1.2.11" directory and execute
    nmake -f win32/Makefile.msc zlib1.dll
    nmake -f win32/Makefile.msc example_d.exe
    example_d.exe (To see if the zlib1.dll is okay.)

[X] Open the GIT Bash we recommended above in order to apply the patches
    for the openexr library:
    cd /c/Libraries/openexr-2.2.1/
    patch CMakeLists.txt /c/<HLAESRC>/advancedfx/patches/openexr-2.2.1/CMakeLists.txt.patch

[X] Build openexr solutions using cmake:
    Enter the "C:\Libraries\openexr-2.2.1" directory and execute
    setlocal
    del /f CMakeCache.txt
    cmake "-DZLIB_ROOT=C:\Libraries\zlib-1.2.11" "-DILMBASE_PACKAGE_PREFIX=C:\<HLAESRC>\ilmbase-build" "-DCMAKE_INSTALL_PREFIX=C:\<HLAESRC>\openexr-build" -G "Visual Studio 15 2017" -T "v141_xp"

[X] Open the C:\Libraries\openexr-2.2.1\openexr.sln created in the previous step
    Select the Release configuration.
    Build the projects b44ExpLogTable and dwaLookups.
    Then copy the .dll files in "C:\<HLAESRC>\ilmbase-build\lib"
    to "C:\Libraries\openexr-2.2.1\IlmImf\Release"!
    Then build the Solution.
    After that build the INSTALL project in the solution.
    If you want to use the .exe files in "C:\<HLAESRC>\openexr-build\bin",
    then you need to copy all DLL files from
    "C:\<HLAESRC>\ilmbase-build\lib", "C:\<HLAESRC>\openexr-build\lib" and
    "C:\Libraries\zlib-1.2.11" there.

[X] Obtain the SharpDX SDK 2.6.3 from
    https://github.com/sharpdx/SharpDX/releases/tag/2.6.3
    and extract it into a folder named "SharpDX" in the same folder where the
    HLAE source code folder is located.

[ ] This step is currently not required!
    Compile and run the ShaderBuilder project (requires the SharpDX SDK) and
    compile the following Shaders to the "shaders\build" folder:
    - shaders\afxHook_splinerope_ps2x.fxc:
      - to afxHook_splinerope_ps20 (profile ps_2_0)
      - to afxHook_splinerope_ps20b (profile ps_2_b)
    - shaders\afxHook_splinecard_vsxx.fxc:
      - to afxHook_splinecard_vs20 (profile vs_2_0)
    - shaders\afxHook_spritecard_vsxx.fxc:
      - to afxHook_spritecard_vs20 (profile vs_2_0)
    - shaders\afxHook_spritecard_ps2x.fxc:
      - to afxHook_spritecard_ps20 (profile ps_2_0)
      - to afxHook_spritecard_ps20b (profile ps_2_b)
    - shaders\afxHook_vertexlit_and_unlit_generic_ps2x.fxc:
      - to afxHook_vertexlit_and_unlit_generic_ps20 (profile ps_2_0)
      - to afxHook_vertexlit_and_unlit_generic_ps20b (profile ps_2_b)
      - to afxHook_vertexlit_and_unlit_generic_ps30 (profile ps_3_0)
    The .h and .acs files build this way are required by the AfxHookSource
    project.

[X] Compile and run the prop\ShaderBuilder project (requires the SharpDX SDK) and
    compile the following Shaders to the "prop\shaders\build" folder:
    - shaders\afx_pgldraw_vs20.fxc:
      - to afx_pgldraw_vs20 (profile vs_2_0)
    - shaders\afx_pgldraw_ps20.fxc:
      - to afx_pgldraw_ps20 (profile ps_2_0)
    - shaders\afx_depth_ps20.fxc
      - to afx_depth_ps20 (profile ps_2_0)
    - shaders\afx_drawtexture_ps20.fxc
      - to afx_drawtexture_ps20 (profile ps_2_0)
    The .h and .acs files build this way are required by the AfxHookSource
    project.

[X] AfxHook\recompile_586.bat, move AfxHook.dat into build\Release\bin\

[X] AfxHook\recompile_x64.bat, move AfxHook.dat into build\Release\bin\x64\

[X] Open advancedfx.sln in the HLAE source code ("C:\<HLAESRC>\advancedfx" folder)
    and Build (Configuration=Release, Platform=x86) in this order:
    AfxHookGoldSrc, AfxHookSource, AfxCppCli, injector, hlae
    and Build (Configuration=Release, Platform=x64) in this order:
	AfxHookUnity
    and Build (Configuration=Release, Platform=x64) in this order:
    injector

[X] Use "C:\<HLAESRC>\advancedfx\copy_resources_release.bat""
    to copy required files and folders to the
    "C:\<HLAESRC>\advancedfx\build\Release\bin" folder.

[X] Copy all files
    form "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\x86"
    to "C:\<HLAESRC>\advancedfx\build\Release\bin"

[X] Copy all files
    form "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Redist\MSVC\14.16.27012\x86\Microsoft.VC141.CRT"
    to "C:\<HLAESRC>\advancedfx\build\Release\bin"

[X] Copy all DLL files from
    "C:\<HLAESRC>\ilmbase-build\lib",
    "C:\<HLAESRC>\openexr-build\lib" (except "IlmImfUtil-2_2.dll") and
    "C:\Libraries\zlib-1.2.11"
    to "C:\<HLAESRC>\advancedfx\build\Release\bin"

[X] You need to package all files covered by the 7zlistfile.txt.
    